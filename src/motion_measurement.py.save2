#!/usr/bin/env python3

## NoSlap by Christoph Schranz & Peter Jeremias
## Motion detection for the alarm
## Taking photos with the rpi camera and write pixel changes to a log csv file

##-----------------------------------------------------------------
import os, time, json
from PIL import Image
from datetime import datetime
import pytz

## defining image dimensions, directory, movement threshold
with open("config/config.json") as f:
	content = json.loads(f.read())

##variables are not called yet, they should replace the ones, assigned in the check.Motion method
VOLUME = content.get("VOLUME", 0)
START_TIME = content.get("START_TIME", "07:00")
END_TIME = content.get("END_TIME", "08:00")
THRESHOLD = content.get("MAGNITUDE_THRESHOLD", 50)
MIN_CHANGE = content.get("MIN_CHANGE", 30)
MAX_CHANGE = content.get("MAX_CHANGE", 20000)
RECENT_VALUES = content.get("RECENT_VALUES", 10)
AWAKE = content.get("AWAKE", 5)

PORT = content.get("PORT", 1810)

WIDTH = 400
HEIGHT = 300
BBOX= (50, 100, 350, 200)
BASEDIR = os.path.dirname(os.path.abspath(__file__))
PATH = BASEDIR + '/images/image.jpg'
THRESHOLD = 50
changelist = []
alarm = False

##main class and definitions
##initially setting images to compare to None
##creating a csv file with with the cration time as name
class App:
    def __init__(self):
        self.image=None                          
        self.pImage=None                          
        self.oldImage=None                      
        self.movingObject = False
        self.datafile = BASEDIR + '/data/data_' + datetime.utcnow().replace(tzinfo=pytz.UTC) \
                        .replace(microsecond=0).isoformat().replace(":", "_").replace("-", "_") \
                        .split("+")[0] + ".csv"
        realseconds = (datetime.utcnow() - datetime(1979, 1, 1)).total_seconds()
        datadir = BASEDIR + '/data'
        for file in os.listdir(datadir):
            filepath = os.path.join(datadir, file)
            if os.path.getctime(filepath) < (realseconds-(3600*24*7)):
                os.remove(filepath)
            
        self.run()
        
    ##command to the rpi camera to take a photo and save it as image in the directory
    ##opening the image to compare
    def takePhoto (self):
        self.oldImage = self.image                # altes Bild 
        command = 'raspistill -t 300 -w %i -h %i -o %s -n '
        os.system(command % (WIDTH, HEIGHT, PATH))
        self.image = Image.open(PATH) 

    ##method to write change values to a csv
    ##crop the two images to a bbox
    def checkMotion (self):                     
        if self.image and self.oldImage:
            old = self.oldImage.crop(BBOX)
            new = self.image.crop(BBOX)
            
            ##assigning the difference to the changed variable
            ##get the time of the change detection and write it with the number of changed pixels to csv
            ##append the change value to a list
            changed = self.getDifference(old, new)
            timestamp = datetime.utcnow().replace(tzinfo=pytz.UTC).isoformat()
            print("{}, {}".format(timestamp, changed))
            with open(self.datafile, 'a') as file:
                file.write("\n{}, {}".format(timestamp, changed))
            changelist.append(changed)


    ##method to detect changes in pixels of the two photos
    ##set a change counter to initially 0 and iterate through all pixel rows and columns
    ##append the change value by 1 if the difference exceeds the threshold, return the value to the main method
    def getDifference(self, old, new):            
        changed = 0
        o, n = old.load(), new.load()
        width, height = old.size
        for x in range(width):
            for y in range(height):
                diff = abs(o[x, y][1] - n[x, y][1])
                if diff > THRESHOLD:
                    changed += 1
        return changed      

    ##write a header to the csv file
    ## loop and call the methods every 0.5 seconds, until alarm is reutrned as True
    def run(self):
        print(self.datafile)
        with open(self.datafile, "w") as file:
            file.write("Timestamp, DifferentPixels")
        while alarm == False:
            self.takePhoto()
            self.checkMotion()
                
            time.sleep(0.5)

##calling the main method
App()

